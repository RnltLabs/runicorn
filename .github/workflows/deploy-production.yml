name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from package.json
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/runicorn:latest
          ${{ secrets.DOCKER_USERNAME }}/runicorn:v${{ steps.package-version.outputs.version }}
        build-args: |
          VITE_GRAPHHOPPER_API_KEY=${{ secrets.VITE_GRAPHHOPPER_API_KEY }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/runicorn:latest
        cache-to: type=inline

    - name: Backup current production container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Save current image as backup
          if docker ps -a | grep -q runicorn; then
            docker commit runicorn runicorn:backup-$(date +%Y%m%d-%H%M%S) || true
          fi

    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/runicorn:latest
          docker stop runicorn || true
          docker rm runicorn || true
          docker run -d -p 3002:3002 --name runicorn --restart unless-stopped ${{ secrets.DOCKER_USERNAME }}/runicorn:latest
          docker image prune -f

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          sleep 5
          if docker ps | grep -q runicorn; then
            echo "‚úÖ Production deployment successful"
            echo "üöÄ Version: v${{ steps.package-version.outputs.version }}"
          else
            echo "‚ùå Production deployment failed"
            exit 1
          fi

    - name: Notify Discord on Success
      if: success()
      run: |
        curl -X POST "${{ secrets.DISCORD_WEBHOOK_RUNICORN_PROD }}" \
          -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "üöÄ Production Deployment Successful",
              "description": "Runicorn v${{ steps.package-version.outputs.version }} deployed to production",
              "color": 3066993,
              "fields": [
                {
                  "name": "Version",
                  "value": "v${{ steps.package-version.outputs.version }}",
                  "inline": true
                },
                {
                  "name": "Environment",
                  "value": "Production",
                  "inline": true
                },
                {
                  "name": "URL",
                  "value": "[Open App](https://runicorn.io/)",
                  "inline": false
                },
                {
                  "name": "Commit",
                  "value": "[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": false
                }
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
            }]
          }'

    - name: Notify Discord on Failure
      if: failure()
      run: |
        curl -X POST "${{ secrets.DISCORD_WEBHOOK_RUNICORN_ERRORS }}" \
          -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "‚ùå Production Deployment Failed",
              "description": "Runicorn production deployment encountered an error",
              "color": 15158332,
              "fields": [
                {
                  "name": "Environment",
                  "value": "Production",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": false
                },
                {
                  "name": "Workflow Run",
                  "value": "[View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
            }]
          }'
        curl -X POST "${{ secrets.DISCORD_WEBHOOK_CRITICAL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "content": "@everyone",
            "embeds": [{
              "title": "üî• CRITICAL: Production Deployment Failed",
              "description": "Runicorn production deployment failed - immediate attention required",
              "color": 15158332,
              "fields": [
                {
                  "name": "Application",
                  "value": "Runicorn",
                  "inline": true
                },
                {
                  "name": "Environment",
                  "value": "Production",
                  "inline": true
                },
                {
                  "name": "Workflow Run",
                  "value": "[View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
            }]
          }'

    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a v${{ steps.package-version.outputs.version }} -m "Release v${{ steps.package-version.outputs.version }}" || true
        git push origin v${{ steps.package-version.outputs.version }} || true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.package-version.outputs.version }}
        name: Release v${{ steps.package-version.outputs.version }}
        body: |
          Automated release for version ${{ steps.package-version.outputs.version }}

          **Deployed to:** https://runicorn.io/
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Linear Issues to Done
      if: success()
      run: |
        # Get the merged PR that triggered this deployment
        PR_NUMBER=$(gh pr list --base main --state merged --limit 1 --json number --jq '.[0].number')

        if [ -n "$PR_NUMBER" ]; then
          # Get PR body and title
          PR_DATA=$(gh pr view $PR_NUMBER --json body,title)
          PR_BODY=$(echo "$PR_DATA" | jq -r '.body')
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')

          # Extract all RNLT-X issue numbers from PR body and title
          ISSUE_NUMBERS=$(echo -e "$PR_TITLE\n$PR_BODY" | grep -oP 'RNLT-\d+' | sort -u)

          if [ -n "$ISSUE_NUMBERS" ]; then
            echo "Found Linear issues: $ISSUE_NUMBERS"

            # For each issue, get its ID and update status to Done
            for ISSUE_IDENTIFIER in $ISSUE_NUMBERS; do
              echo "Processing $ISSUE_IDENTIFIER..."

              # Get issue ID from identifier
              ISSUE_ID=$(curl -s -X POST https://api.linear.app/graphql \
                -H "Content-Type: application/json" \
                -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
                -d "{\"query\":\"{ issue(id: \\\"$ISSUE_IDENTIFIER\\\") { id } }\"}" \
                | jq -r '.data.issue.id')

              if [ "$ISSUE_ID" != "null" ] && [ -n "$ISSUE_ID" ]; then
                # Update issue to Done
                curl -s -X POST https://api.linear.app/graphql \
                  -H "Content-Type: application/json" \
                  -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
                  -d "{\"query\":\"mutation { issueUpdate(id: \\\"$ISSUE_ID\\\", input: { stateId: \\\"80530df2-d0e3-40bc-9526-eb5c0c310b6d\\\" }) { success } }\"}"

                echo "‚úÖ $ISSUE_IDENTIFIER updated to Done (Production deployed)"
              fi
            done
          else
            echo "No Linear issues found in PR #$PR_NUMBER"
          fi
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
